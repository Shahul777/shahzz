@Component
public class TableConverter {
    // ... Other methods ...

    private Subsection getOrCreateSubsection(Section section, String subsectionName) {
        Subsection subsection = null;
        for (Subsection existingSubsection : section.getSubsections()) {
            if (existingSubsection.getSubsectionName().equals(subsectionName)) {
                subsection = existingSubsection;
                break;
            }
        }

        if (subsection == null) {
            subsection = new Subsection();
            subsection.setSubsectionName(subsectionName);
            subsection.setSection(section);
            section.getSubsections().add(subsection);
        }

        return subsection;
    }

    private QuestionSubsection getOrCreateQuestionSubsection(Subsection subsection, String questionSubsectionName) {
        QuestionSubsection questionSubsection = null;
        for (QuestionSubsection existingQuestionSubsection : subsection.getQuestionSubsections()) {
            if (existingQuestionSubsection.getQuestionSubsectionName().equals(questionSubsectionName)) {
                questionSubsection = existingQuestionSubsection;
                break;
            }
        }

        if (questionSubsection == null) {
            questionSubsection = new QuestionSubsection();
            questionSubsection.setQuestionSubsectionName(questionSubsectionName);
            questionSubsection.setSubsection(subsection);
            subsection.getQuestionSubsections().add(questionSubsection);
        }

        return questionSubsection;
    }

    // ... Other methods ...
}




import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;

@Component
public class TableConverter {
    public List<Section> convertToStructuredObjects(List<List<String>> records) {
        Multimap<String, Section> sectionMap = ArrayListMultimap.create();

        for (List<String> record : records) {
            String sectionName = record.get(0);
            String subsectionName = record.get(1);
            String questionSubsectionName = record.get(2);
            String question = record.get(3);
            String options = record.get(4); // This should be a comma-separated list
            String answer = record.get(5);

            List<String> optionsList = new ArrayList<>();
            if (options != null && !options.isEmpty()) {
                optionsList = Arrays.asList(options.split(","));
            }

            Section section = getOrCreateSection(sectionMap, sectionName);
            Subsection subsection = getOrCreateSubsection(section, subsectionName);
            QuestionSubsection questionSubsection = getOrCreateQuestionSubsection(subsection, questionSubsectionName);
            TableEntry tableEntry = new TableEntry(question, answer, questionSubsection);

            for (String option : optionsList) {
                OptionChoice optionChoice = new OptionChoice(option, tableEntry);
                tableEntry.addOptionChoice(optionChoice);
            }
        }

        return new ArrayList<>(sectionMap.values());
    }

    private Section getOrCreateSection(Multimap<String, Section> sectionMap, String sectionName) {
        Section section = sectionMap.get(sectionName).stream().findFirst().orElse(null);
        if (section == null) {
            section = new Section();
            section.setSectionName(sectionName);
            sectionMap.put(sectionName, section);
        }
        return section;
    }

    // Similar methods for Subsection and QuestionSubsection creation...

    // Other methods...
}
