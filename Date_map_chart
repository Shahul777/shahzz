

My name is Jane Smith. You can contact me at the following phone numbers:
- USA: +1 (123) 456-7890
- UK: +44 20 1234 5678
- France: +33 1 23 45 67 89
- Germany: +49 30 1234567
- Japan: +81 3 1234 5678
- Australia: +61 2 1234 5678
- Canada: +1 416-123-4567
- China: +86 10 1234 5678
- Brazil: +55 11 1234-5678
- India: +91 11 1234 5678
- South Korea: +82 2-1234-5678
- Russia: +7 495 123-45-67
- Italy: +39 02 1234 5678
- Mexico: +52 55 1234 5678
- Spain: +34 91 123 45 67
- Netherlands: +31 20 123 4567
- Switzerland: +41 44 123 45 67
- Belgium: +32 2 123 45 67
- Sweden: +46 8 123 45 67
- Norway: +47 21 12 34 56
- Denmark: +45 12 34 56 78
- Finland: +358 9 1234567
- Portugal: +351 21 123 4567
- Greece: +30 21 1234 5678
- Turkey: +90 212 123 4567
- UAE: +971 4 123 4567
- Saudi Arabia: +966 11 123 4567
- Egypt: +20 2 1234 5678
- South Africa: +27 11 123 4567
- Singapore: +65 6123 4567
- Malaysia: +60 3-1234 5678

I live at the following addresses:
- USA: 123 Main St, Anytown, CA 12345
- UK: 456 High St, London, W1A 1AA
- France: 789 Rue de la Paix, Paris, 75001
- Germany: Hauptstraße 1, Berlin, 10115
- Japan: 1-1-1 Chiyoda, Tokyo, 100-8111
- Australia: 123 Smith St, Sydney, NSW 2000
- Canada: 456 Maple Ave, Toronto, ON M5A 1A1
- China: 789 Zhongshan Rd, Shanghai, 200000
- Brazil: 123 Rua do Comércio, São Paulo, SP 01000-000
- India: 456 Gandhi Nagar, New Delhi, Delhi 110001
- South Korea: 789 Gangnam-daero, Seoul, 06000
- Russia: 123 Prospekt Mira, Moscow, 101000
- Italy: 456 Via Roma, Rome, 00184
- Mexico: 789 Avenida Juárez, Mexico City, 06000
- Spain: 123 Calle de Alcalá, Madrid, 28009
- Netherlands: 456 Dam Square, Amsterdam, 1012 JS
- Switzerland: 789 Bahnhofstrasse, Zurich, 8001
- Belgium: 123 Grand Place, Brussels, 1000
- Sweden: 456 Drottninggatan, Stockholm, 111 51
- Norway: 789 Karl Johans gate, Oslo, 0154
- Denmark: 123 Strøget, Copenhagen, 1000
- Finland: 456 Mannerheimintie, Helsinki, 00100
- Portugal: 789 Rua Augusta, Lisbon, 1100-053
- Greece: 123 Ermou Street, Athens, 105 63
- Turkey: 456 Istiklal Avenue, Istanbul, 34435
- UAE: 789 Sheikh Zayed Road, Dubai, 12345
- Saudi Arabia: 123 King Fahd Rd, Riyadh, 12345
- Egypt: 456 Tahrir Square, Cairo, 11511
- South Africa: 789 Nelson Mandela Blvd, Johannesburg, 2000
- Singapore: 123 Orchard Rd, Singapore 238855
- Malaysia: 456 Jalan Bukit Bintang, Kuala Lumpur, 55100






private boolean isCellInRange(Cell cell, CellRangeAddressList addressList) {
    for (CellRangeAddress address : addressList.getCellRangeAddresses()) {
        if (address.isInRange(cell.getRowIndex(), cell.getColumnIndex())) {
            return true;
        }
    }
    return false;
}


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class ExcelDropdownService {

    public List<String> getDropdownValuesFromExcel(InputStream inputStream, int row, int col) throws IOException {
        List<String> dropdownValues = new ArrayList<>();

        try (Workbook workbook = new XSSFWorkbook(inputStream)) {
            Sheet sheet = workbook.getSheetAt(0);
            Row targetRow = sheet.getRow(row);

            if (targetRow != null) {
                Cell targetCell = targetRow.getCell(col);

                if (targetCell != null) {
                    CellStyle cellStyle = targetCell.getCellStyle();
                    DataValidationHelper dvHelper = sheet.getDataValidationHelper();

                    for (DataValidation dataValidation : sheet.getDataValidations()) {
                        CellRangeAddressList addressList = dataValidation.getRegions();
                        if (isCellInRange(targetCell, addressList)) {
                            DataValidationConstraint constraint = dataValidation.getValidationConstraint();
                            if (constraint.getExplicitListValues() != null) {
                                CellRangeAddressList currentAddressList = new CellRangeAddressList(
                                        targetCell.getRowIndex(), targetCell.getRowIndex(),
                                        targetCell.getColumnIndex(), targetCell.getColumnIndex());

                                DataValidation currentDataValidation = dvHelper.createValidation(constraint, currentAddressList);
                                currentDataValidation.setShowDropDown(true);
                                targetCell.setCellStyle(cellStyle);
                                sheet.addValidationData(currentDataValidation);

                                for (int i = 0; i < constraint.getExplicitListValues().length; i++) {
                                    dropdownValues.add(targetCell.getStringCellValue());
                                    targetCell.setCellValue("");
                                }

                                break;
                            }
                        }
                    }
                }
            }
        }

        return dropdownValues;
    }

    private boolean isCellInRange(Cell cell, CellRangeAddressList addressList) {
        return addressList.getCellRangeAddresses().stream().anyMatch(address -> address.isInRange(cell));
    }
}



import { forkJoin, of } from 'rxjs';
import { catchError } from 'rxjs/operators';

// Observable functions
const observable1 = serviceCall1();
const observable2 = serviceCall2();
const observable3 = serviceCall3();
const observable4 = serviceCall4();

// Use catchError for each observable
observable1.pipe(
  catchError(error => {
    console.error('Error in observable 1:', error);
    return of(null); // Continue with a null value
  })
);

observable2.pipe(
  catchError(error => {
    console.error('Error in observable 2:', error);
    return of(null); // Continue with a null value
  })
);

observable3.pipe(
  catchError(error => {
    console.error('Error in observable 3:', error);
    return of(null); // Continue with a null value
  })
);

observable4.pipe(
  catchError(error => {
    console.error('Error in observable 4:', error);
    return of(null); // Continue with a null value
  })
);

// Subscribe using forkJoin
forkJoin([observable1, observable2, observable3, observable4]).subscribe(results => {
  // Handle results (results array contains values or null values for each observable)
});









const data = [
  { x: new Date('2023-01-01'), y: 5 },
  { x: new Date('2023-02-01'), y: 8 },
  { x: new Date('2023-03-01'), y: 12 },
  { x: new Date('2023-04-01'), y: 7 },
  // Add more data points as needed
];



const ctx = document.getElementById('areaChart').getContext('2d');

const data = [
  { x: '2023-01-01', y: 5 },
  { x: '2023-02-01', y: 8 },
  { x: '2023-03-01', y: 12 },
  { x: '2023-04-01', y: 7 },
  // Add more data points as needed
];

new Chart(ctx, {
  type: 'line',
  data: {
    datasets: [
      {
        label: 'My Area Chart',
        data: data,
        backgroundColor: 'rgba(75, 192, 192, 0.2)', // Area fill color
        borderColor: 'rgba(75, 192, 192, 1)', // Border color
        borderWidth: 2, // Border width
      },
    ],
  },
  options: {
    scales: {
      x: {
        type: 'time', // Set X axis as time-based
        time: {
          unit: 'month', // Display units by month
        },
      },
      y: {
        beginAtZero: true, // Start Y axis from 0
      },
    },
  },
});






new Chart(ctx, {
  type: 'line',
  data: {
    // ... your data configuration ...
  },
  options: {
    scales: {
      x: {
        grid: {
          display: false, // Hide X axis grid lines
        },
      },
      y: {
        grid: {
          display: false, // Hide Y axis grid lines
        },
      },
    },
  },
});


// Get the canvas element
const ctx = document.getElementById('areaChart').getContext('2d');

// Sample data for different datasets
const dataset1Data = [3, 5, 8, 12, 10];
const dataset2Data = [2, 4, 6, 8, 7];
const dataset3Data = [6, 8, 10, 5, 9];
const dataset4Data = [9, 7, 3, 10, 6];
const dataset5Data = [4, 3, 9, 6, 8];

// Create a linear gradient with border color for each dataset
const createGradient = (color) => {
  const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
  gradient.addColorStop(0, `rgba(${color}, 0.5)`);
  gradient.addColorStop(1, `rgba(${color}, 0)`);
  return gradient;
};

// Define colors for each dataset
const colors = [
  '255, 0, 0',   // Red
  '0, 0, 255',   // Blue
  '0, 255, 0',   // Green
  '255, 165, 0', // Orange
  '128, 0, 128'  // Purple
];

// Create the area chart
new Chart(ctx, {
  type: 'line',
  data: {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
    datasets: colors.map((color, index) => ({
      label: `Dataset ${index + 1}`,
      data: [dataset1Data, dataset2Data, dataset3Data, dataset4Data, dataset5Data][index],
      backgroundColor: createGradient(color),
      borderColor: `rgb(${color})`,
      borderWidth: 2,
    })),
  },
});





function getWeekNumberInMonth(date: Date, targetMonth: number): number {
  const startOfMonth = new Date(date.getFullYear(), targetMonth, 1);
  const dayOfWeek = startOfMonth.getDay();
  const weekOffset = dayOfWeek === 0 ? 1 : 0; // Adjust for Sunday-based weeks

  const weekNumber = Math.ceil((date.getDate() + dayOfWeek - weekOffset) / 7);

  return weekNumber;
}



function getWeekNumber(date: Date): number {
  // Copy the date object to avoid modifying the original date
  const copiedDate = new Date(date);

  // Set the day to Monday (ISO week starts on Monday)
  copiedDate.setDate(copiedDate.getDate() + 4 - (copiedDate.getDay() || 7));

  // Get the year for the Monday of the week
  const yearStart = new Date(copiedDate.getFullYear(), 0, 1);

  // Calculate the week number as the number of full weeks between the Monday and the year start
  const weekNumber = Math.ceil(((copiedDate.getTime() - yearStart.getTime()) / 86400000 + 1) / 7);

  return weekNumber;
}


function createWeekList(dateList: Date[], month: string): { date: Date; week: string }[] {
  const weekList = [];
  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const monthIndex = monthNames.findIndex(name => name.toLowerCase() === month.toLowerCase());
  if (monthIndex === -1) {
    throw new Error('Invalid month name.');
  }

  const startDate = new Date(new Date().getFullYear(), monthIndex, 1);
  const endDate = new Date(new Date().getFullYear(), monthIndex + 1, 0);

  for (const date of dateList) {
    if (date >= startDate && date <= endDate) {
      const weekNumber = getWeekNumber(date);
      const weekLabel = `Week ${weekNumber}`;
      weekList.push({ date: date, week: weekLabel });
    }
  }

  return weekList;
}

// Example usage:
const dateList = [new Date('2023-01-03'), new Date('2023-01-09'), new Date('2023-01-14'), new Date('2023-01-25')];
const month = 'Jan';

const weekList = createWeekList(dateList, month);
console.log(weekList);


...





import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-area-chart',
  templateUrl: './area-chart.component.html',
  styleUrls: ['./area-chart.component.css']
})
export class AreaChartComponent implements OnInit {
  // ... previous code ...

  combineAndGroupJobsByTimeInterval(maskingDates: Date[], discoveryDates: Date[]): any[] {
    const maskingData = this.groupJobsByTimeInterval(maskingDates, 'Category 1'); // Rename 'Masking Jobs' to 'Category 1'
    const discoveryData = this.groupJobsByTimeInterval(discoveryDates, 'Category 2'); // Rename 'Discovery Jobs' to 'Category 2'

    return [
      {
        name: 'Category 1',
        series: maskingData
      },
      {
        name: 'Category 2',
        series: discoveryData
      }
    ];
  }

  groupJobsByTimeInterval(dates: Date[], name: string): any[] {
    const intervalType = this.getIntervalType(dates); // Determine the interval type

    // Get all intervals based on the interval type
    const allIntervals = this.getAllIntervals(intervalType);

    // Create an object to store count for each interval
    const intervalCounts = {};
    for (const interval of allIntervals) {
      intervalCounts[interval] = 0;
    }

    // Count the occurrences of each interval
    for (const date of dates) {
      const interval = this.getIntervalFromDate(date, intervalType);
      intervalCounts[interval]++;
    }

    // Prepare data in the ngx-charts format
    return allIntervals.map(interval => ({
      name: name,
      value: intervalCounts[interval],
      nameWithYear: interval // Use nameWithYear for formatted interval name
    }));
  }

  // ... remaining code ...
}


...
getAllIntervals(intervalType: string): string[] {
  if (intervalType === 'month') {
    const formatter = new Intl.DateTimeFormat('en', { month: 'short' });
    const allMonths = [];
    for (let month = 0; month < 12; month++) {
      const date = new Date(2023, month, 1); // Using 2023 as a reference year
      const monthName = formatter.format(date);
      allMonths.push(monthName);
    }
    return allMonths;
  } else if (intervalType === 'week') {
    const allWeeks = [];
    const startDate = new Date(2023, 0, 1); // Using 2023 as a reference year
    for (let week = 1; week <= 52; week++) {
      const endDate = new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000);
      const weekLabel = `Week ${week}`;
      allWeeks.push(weekLabel);
      startDate.setDate(startDate.getDate() + 7);
    }
    return allWeeks;
  } else if (intervalType === 'year') {
    const formatter = new Intl.DateTimeFormat('en', { year: 'numeric' });
    const allYears = [];
    const currentYear = new Date().getFullYear();
    for (let year = currentYear; year >= currentYear - 10; year--) { // We'll consider the last 10 years
      const date = new Date(year, 0, 1);
      const yearNumber = formatter.format(date);
      allYears.push('Year ' + yearNumber);
    }
    return allYears;
  } else {
    // Handle other interval types as needed.
    return [];
  }
}




import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-area-chart',
  templateUrl: './area-chart.component.html',
  styleUrls: ['./area-chart.component.css']
})
export class AreaChartComponent implements OnInit {
  maskingJobs = [
    "2023-01-03T11:56:36.112+0000",
    "2023-02-03T13:20:05.290+0000",
    // Add more dates as needed
  ];

  discoveryJobs = [
    "2023-03-03T09:15:36.112+0000",
    "2023-03-03T11:30:05.290+0000",
    // Add more dates as needed
  ];

  maskingJobDates: Date[] = [];
  discoveryJobDates: Date[] = [];
  combinedIntervalData: { name: string, series: { name: string, value: number }[] }[] = [];

  ngOnInit(): void {
    this.maskingJobDates = this.maskingJobs.map(dateStr => new Date(dateStr));
    this.discoveryJobDates = this.discoveryJobs.map(dateStr => new Date(dateStr));

    this.combinedIntervalData = this.combineAndGroupJobsByTimeInterval(this.maskingJobDates, this.discoveryJobDates);
  }

  combineAndGroupJobsByTimeInterval(maskingDates: Date[], discoveryDates: Date[]): { name: string, series: { name: string, value: number }[] }[] {
    const maskingData = this.groupJobsByTimeInterval(maskingDates);
    const discoveryData = this.groupJobsByTimeInterval(discoveryDates);

    return [
      {
        name: 'Category 1', // Masking Jobs
        series: maskingData,
      },
      {
        name: 'Category 2', // Discovery Jobs
        series: discoveryData,
      }
    ];
  }

  groupJobsByTimeInterval(dates: Date[]): { name: string, value: number }[] {
    // ... implementation for determining the interval based on date differences ...
    // ... implementation for grouping jobs by year, quarter, month, week, and day ...
  }
}
..,......
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-area-chart',
  templateUrl: './area-chart.component.html',
  styleUrls: ['./area-chart.component.css']
})
export class AreaChartComponent implements OnInit {
  maskingJobs = [
    "2023-01-03T11:56:36.112+0000",
    "2023-02-03T13:20:05.290+0000",
    // Add more dates as needed
  ];

  discoveryJobs = [
    "2023-03-03T09:15:36.112+0000",
    "2023-03-03T11:30:05.290+0000",
    // Add more dates as needed
  ];

  maskingJobDates: Date[] = [];
  discoveryJobDates: Date[] = [];
  combinedIntervalData: { name: string, series: { name: string, value: number }[] }[] = [];

  ngOnInit(): void {
    this.maskingJobDates = this.maskingJobs.map(dateStr => new Date(dateStr));
    this.discoveryJobDates = this.discoveryJobs.map(dateStr => new Date(dateStr));

    this.combinedIntervalData = this.combineAndGroupJobsByTimeInterval(this.maskingJobDates, this.discoveryJobDates);
  }

  combineAndGroupJobsByTimeInterval(maskingDates: Date[], discoveryDates: Date[]): { name: string, series: { name: string, value: number }[] }[] {
    const maskingData = this.groupJobsByTimeInterval(maskingDates);
    const discoveryData = this.groupJobsByTimeInterval(discoveryDates);

    return [
      {
        name: 'Category 1', // Masking Jobs
        series: maskingData,
      },
      {
        name: 'Category 2', // Discovery Jobs
        series: discoveryData,
      }
    ];
  }

  groupJobsByTimeInterval(dates: Date[]): { name: string, value: number }[] {
    const intervalData: { [key: string]: number } = {};
    const dateDifference = this.getDateDifference(dates);
    const numMonths = dateDifference.getMonths();
    const numDays = dateDifference.getDays();
    let intervalType: 'month' | 'week' | 'year';

    if (numMonths >= 12) {
      intervalType = 'year';
    } else if (numMonths >= 4) {
      intervalType = 'quarter';
    } else if (numMonths >= 1) {
      intervalType = 'month';
    } else if (numDays >= 7) {
      intervalType = 'week';
    } else {
      intervalType = 'day';
    }

    const formatter = new Intl.DateTimeFormat('en', { [intervalType]: 'short' });

    dates.forEach(date => {
      const intervalName = formatter.format(date);

      if (!intervalData[intervalName]) {
        intervalData[intervalName] = 1;
      } else {
        intervalData[intervalName]++;
      }
    });

    const seriesData = Object.keys(intervalData).map(intervalName => ({ name: intervalName, value: intervalData[intervalName] }));
    
    // Fill missing intervals with 0 value
    const sortedSeriesData = seriesData.sort((a, b) => a.name.localeCompare(b.name));
    const filledSeriesData = this.fillMissingIntervals(sortedSeriesData, intervalType);

    return filledSeriesData;
  }

  fillMissingIntervals(seriesData: { name: string, value: number }[], intervalType: string): { name: string, value: number }[] {
    const allIntervals = this.getAllIntervals(intervalType);
    const filledData: { name: string, value: number }[] = [];

    allIntervals.forEach(interval => {
      const matchingData = seriesData.find(data => data.name === interval);
      filledData.push(matchingData ? matchingData : { name: interval, value: 0 });
    });

    return filledData;
  }

  getAllIntervals(intervalType: string): string[] {
    // Customize this function to get all possible intervals based on the intervalType
    // For example, return an array of month names, week numbers, or years.
    // For simplicity, we will use hardcoded month names as an example here.
    if (intervalType === 'month') {
      return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    } else if (intervalType === 'week') {
      // Customize to return week numbers.
      return [];
    } else if (intervalType === 'year') {
      // Customize to return years.
      return [];
    } else {
      // Handle other interval types as needed.
      return [];
    }
  }

  getDateDifference(dates: Date[]): { getMonths: () => number, getDays: () => number } {
    const sortedDates = dates.sort((a, b) => a.getTime() - b.getTime());
    const firstDate = sortedDates[0];
    const lastDate = sortedDates[sortedDates.length - 1];
    const diffMilliseconds = lastDate.getTime() - firstDate.getTime();

    return {
      getMonths: () => {
        const yearDiff = lastDate.getFullYear() - firstDate.getFullYear();
        const monthDiff = lastDate.getMonth() - firstDate.getMonth();
        return yearDiff * 12 + monthDiff;
      },
      getDays: () => Math.floor(diffMilliseconds / (1000 * 60 * 60 * 24))
    };
  }
}
...........





import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-area-chart',
  templateUrl: './area-chart.component.html',
  styleUrls: ['./area-chart.component.css']
})
export class AreaChartComponent implements OnInit {
  // ... previous code ...

  getAllIntervals(intervalType: string): string[] {
    if (intervalType === 'month') {
      const formatter = new Intl.DateTimeFormat('en', { month: 'short' });
      const allMonths = [];
      for (let month = 0; month < 12; month++) {
        const date = new Date(2023, month, 1); // Using 2023 as a reference year
        const monthName = formatter.format(date);
        allMonths.push(monthName);
      }
      return allMonths;
    } else if (intervalType === 'week') {
      const formatter = new Intl.DateTimeFormat('en', { week: 'numeric' });
      const allWeeks = [];
      for (let week = 1; week <= 52; week++) {
        const date = new Date(2023, 0, week * 7); // Using 2023 as a reference year
        const weekNumber = formatter.format(date);
        allWeeks.push('Week ' + weekNumber);
      }
      return allWeeks;
    } else if (intervalType === 'year') {
      const formatter = new Intl.DateTimeFormat('en', { year: 'numeric' });
      const allYears = [];
      const currentYear = new Date().getFullYear();
      for (let year = currentYear; year >= currentYear - 10; year--) { // We'll consider the last 10 years
        const date = new Date(year, 0, 1);
        const yearNumber = formatter.format(date);
        allYears.push('Year ' + yearNumber);
      }
      return allYears;
    } else {
      // Handle other interval types as needed.
      return [];
    }
  }

  // ... remaining code ...
}

