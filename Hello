import { Component, NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { NgxChartsModule } from '@swimlane/ngx-charts';
import { single } from './data';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  single: any[];
  view: any[] = [700, 400];

  // options
  gradient: boolean = false;
  animations: boolean = true;

  colorScheme = {
    domain:  [
      "#FF63471A",  // rgba(255, 99, 71, 0.1)
      "#FF634733",  // rgba(255, 99, 71, 0.2)
      "#FF63474D",  // rgba(255, 99, 71, 0.3)
      "#FF634766",  // rgba(255, 99, 71, 0.4)
      "#FF634780",  // rgba(255, 99, 71, 0.5)
      "#FF634799",  // rgba(255, 99, 71, 0.6)
      "#FF6347B3",  // rgba(255, 99, 71, 0.7)
      "#FF6347CC",  // rgba(255, 99, 71, 0.8)
      "#FF6347E6",  // rgba(255, 99, 71, 0.9)
      "#FF6347FF"   // rgba(255, 99, 71, 1)
    ]
  };
colorScheme2 : any=[];
  constructor() {
    Object.assign(this, { single });
    
    this.colorScheme2 = [
      "#FF63471A",  // rgba(255, 99, 71, 0.1)
      "#FF634733",  // rgba(255, 99, 71, 0.2)
      "#FF63474D",  // rgba(255, 99, 71, 0.3)
      "#FF634766",  // rgba(255, 99, 71, 0.4)
      "#FF634780",  // rgba(255, 99, 71, 0.5)
      "#FF634799",  // rgba(255, 99, 71, 0.6)
      "#FF6347B3",  // rgba(255, 99, 71, 0.7)
      "#FF6347CC",  // rgba(255, 99, 71, 0.8)
      "#FF6347E6",  // rgba(255, 99, 71, 0.9)
      "#FF6347FF"   // rgba(255, 99, 71, 1)
    ];

    this.single.sort((a, b) => b.value - a.value);
    const maxPopulation = this.single[0].value;

    // Adjust the color scheme density based on the population count
    const numColors = this.colorScheme.length;
    for (let i = 0; i < numColors; i++) {
      const alpha = i / (numColors - 1);
      this.colorScheme[i] = this.setAlpha(this.colorScheme[i], alpha);
    }

    // Assign the color scheme to the countries based on their population count
    this.single.forEach(country => {
      const density = country.value / maxPopulation;
      const index = Math.round(density * (numColors - 1));
      country.color = this.colorScheme[index];
    });
  }
  setAlpha(color: string, alpha: number): string {
    const alphaHex = Math.round(alpha * 255).toString(16).padStart(2, '0');
    return color.slice(0, 7) + alphaHex;
  }
  onSelect(event) {
    console.log(event);
  }

  labelFormatting(c) {
    return `${(c.label)} Population`;
  }
}
