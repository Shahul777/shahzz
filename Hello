-- Creating the first table (Customers)
CREATE TABLE Customers (
    customer_id NUMBER PRIMARY KEY,
    customer_name VARCHAR2(100),
    email VARCHAR2(100)
);

-- Creating the second table (Orders)
CREATE TABLE Orders (
    order_id NUMBER PRIMARY KEY,
    customer_id NUMBER,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Creating the third table (Products)
CREATE TABLE Products (
    product_id NUMBER PRIMARY KEY,
    product_name VARCHAR2(100),
    price NUMBER
);

-- Creating the fourth table (Addresses)
CREATE TABLE Addresses (
    address_id NUMBER PRIMARY KEY,
    address_line VARCHAR2(100),
    city VARCHAR2(50),
    country VARCHAR2(50)
);

-- Inserting data into Customers
INSERT INTO Customers (customer_id, customer_name, email)
VALUES (1, 'John Smith', 'john@example.com'),
       (2, 'Alice Johnson', 'alice@example.com'),
       (3, 'Michael Brown', 'michael@example.com'),
       (4, 'Emily Davis', 'emily@example.com'),
       (5, 'Daniel Wilson', 'daniel@example.com'),
       (6, 'Sophia Martinez', 'sophia@example.com');

-- Inserting data into Orders
INSERT INTO Orders (order_id, customer_id, order_date)
VALUES (1, 1, TO_DATE('2024-05-16', 'YYYY-MM-DD')),
       (2, 2, TO_DATE('2024-05-15', 'YYYY-MM-DD')),
       (3, 3, TO_DATE('2024-05-14', 'YYYY-MM-DD')),
       (4, 4, TO_DATE('2024-05-13', 'YYYY-MM-DD')),
       (5, 5, TO_DATE('2024-05-12', 'YYYY-MM-DD')),
       (6, 6, TO_DATE('2024-05-11', 'YYYY-MM-DD'));

-- Inserting data into Products
INSERT INTO Products (product_id, product_name, price)
VALUES (1, 'Laptop', 1000),
       (2, 'Smartphone', 800),
       (3, 'Headphones', 100),
       (4, 'Tablet', 600),
       (5, 'Smartwatch', 300),
       (6, 'Camera', 1200);

-- Inserting data into Addresses
INSERT INTO Addresses (address_id, address_line, city, country)
VALUES (1, '123 Main St', 'New York', 'USA'),
       (2, '456 Elm St', 'Los Angeles', 'USA'),
       (3, '789 Oak St', 'Chicago', 'USA'),
       (4, '101 Pine St', 'Houston', 'USA'),
       (5, '222 Maple St', 'San Francisco', 'USA'),
       (6, '333 Cedar St', 'Miami', 'USA');








def find_substring_with_spaces(substring, string):
    # Remove whitespace from both the substring and the string
    substring_stripped = ''.join(substring.split())
    string_stripped = ''.join(string.split())

    # Find the substring without spaces in the stripped string
    index = string_stripped.find(substring_stripped)
    
    if index != -1:
        # Calculate start index including spaces
        start_index = string.find(string_stripped[:index])

        # Calculate end index including spaces
        end_index = start_index + len(substring)
        return start_index, end_index
    else:
        return -1, -1

# Test case
string1 = "abc"
string2 = "a b c"
start_index, end_index = find_substring_with_spaces(string1, string2)
print("Start index:", start_index)
print("End index:", end_index)





^(\d{1,5}\s+[\w\s]+),\s*([\w\s]+),\s*([\w\s]+),\s*([A-Za-z]{2,})\s*(\d{5})?$
^.*?(\d{1,5}\s+\w+(\s+\w+){0,2}),\s*(\w+(\s+\w+){0,2}),\s*([A-Za-z]{2,})\s*(\d{5})?.*$

\b\d+\s+[\w\s.,-]+\s+\w{2,20}\s*,?\s+\w{2,20}\s*,?\s+\w{2,20}\b


import re

def find_phone_number(string, phone_number):
    # Remove spaces from the provided phone number
    phone_number = phone_number.replace(" ", "")

    # Define the regular expression pattern to match the phone number
    pattern = re.compile(re.escape(phone_number))

    # Search for the phone number pattern in the string
    match = pattern.search(string)

    if match:
        # Return the start and end index of the matched phone number
        return match.start(), match.end()
    else:
        return None

# Test data
string = "France: +33 1 23 45 67 89"
phone_number = "+33123456789"

# Find the phone number in the string
result = find_phone_number(string, phone_number)

if result:
    start_index, end_index = result
    print("Phone number found. Start index:", start_index, "End index:", end_index)
else:
    print("Phone number not found in the string.")





import phonenumbers
from postal_address_normalizer import AddressParser

def extract_sensitive_info(text):
    # Extract phone numbers using phonenumbers library
    phone_numbers = []
    for match in phonenumbers.PhoneNumberMatcher(text, None):
        phone_numbers.append(phonenumbers.format_number(match.number, phonenumbers.PhoneNumberFormat.E164))

    # Extract addresses using postal-address-normalizer library
    parser = AddressParser()
    parsed_addresses = parser.parse_address(text)
    addresses = []
    for addr in parsed_addresses:
        address = ', '.join(addr)
        addresses.append(address)

    return phone_numbers, addresses

def main():
    # Sample text
    text = "My name is Shahul, my mobile numbers are +1 (123) 456-7890 and +91 9876543210, and my addresses are 123 Main St, Anytown, USA and 456 Oak St, Othertown, India."

    try:
        # Extract sensitive information
        phone_numbers, addresses = extract_sensitive_info(text)

        # Print results
        print("Phone Numbers:", phone_numbers)
        print("Addresses:", addresses)
    except Exception as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
String regex = "\\d+\\s+[^,]+,\\s+[^,]+,\\s+[^,]+,\\s+\\w{2,3}\\s*\\d{0,5}";




https://apc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fsystem-test.onvue.com%2Fsystem_test%3Fcustomer%3Dpearson_vue%26clientcode%3DAWS%26candidate_id%3D304625309%26registration_id%3D459660878%26locale%3Den-US&data=05%7C01%7Cshahul.m%40infosys.com%7Cfee5aef098484724e31908dbb7a4fdc3%7C63ce7d592f3e42cda8ccbe764cff5eb6%7C0%7C0%7C638305691508662612%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=pHnsu4e8pXD21K%2B%2F30Kgvp7PsU4UbMevQCXxu8w%2FVls%3D&reserved=0

https://apc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fexamlaunchpad.pearsonvue.com%2Fentry-point%2Flaunch-exam%2FAWS%2FOP%3FregistrationToken%3D9j3xrjq%252Furx4f4sNKIDK9twgI0T7%252FMcEV%252BUiNTZ4jZ%252BjXZm6k4Ojzd4hR%252FMSp5DvVEDxnBVIkuF5huxZU4j3qmZHvSlhGx2pgfyW%252FGgeZDVIfKhCr6YoTx1Vr%252BjDvTwkawopM5Xev7jBZHZD2xbOQg%253D%253D%26locale%3Den-US&data=05%7C01%7Cshahul.m%40infosys.com%7Cfee5aef098484724e31908dbb7a4fdc3%7C63ce7d592f3e42cda8ccbe764cff5eb6%7C0%7C0%7C638305691508662612%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=mt86cnaiGzMIWamlldsRy2stqncZEzMNA%2FpArHgjDKg%3D&reserved=0



............

https://apc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fhome.pearsonvue.com%2Fonvuehelp&data=05%7C01%7Cshahul.m%40infosys.com%7Cfee5aef098484724e31908dbb7a4fdc3%7C63ce7d592f3e42cda8ccbe764cff5eb6%7C0%7C0%7C638305691508662612%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=b9ZF0LHopflMmE9Dg3wvirTSGDR6TvVlX0GU6H7Mpb8%3D&reserved=0
